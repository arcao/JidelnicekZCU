buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.google.com/' }
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.14.0'
        classpath 'com.android.tools.build:gradle:3.0.0-alpha1'
    }
}

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.android.application'

repositories {
    jcenter()
    maven { url 'https://maven.google.com/' }
    maven { url 'https://raw.githubusercontent.com/Goddchen/mvn-repo/master/' }
}

def gitSha() {
    return 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
}

static def buildTime() {
    return new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ", TimeZone.getTimeZone('UTC'))
}

def gitVersionCode() {
    return 'git rev-list --count HEAD'.execute([], project.rootDir).text.trim().toInteger()
}

def isTravis = 'true' == System.getenv('TRAVIS')
def preDexEnabled = 'true' == System.getProperty('pre-dex', 'true')

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries preDexEnabled && !isTravis
    }

    defaultConfig {
        versionCode gitVersionCode()
        buildConfigField 'String', 'GIT_SHA', 'null'
        buildConfigField 'String', 'BUILD_TIME', 'null'

        resConfigs 'cs'

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath false
            }
        }
    }

    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            keyAlias "jidelnicekzcu"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.dev'
            versionNameSuffix '-dev'
        }
        release {
            versionNameSuffix ''

            buildConfigField 'String', 'GIT_SHA', '"' + gitSha() + '"'
            buildConfigField 'String', 'BUILD_TIME', '"' + buildTime() + '"'

            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources false // cause app crash if is true
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFile 'proguard.pro'
        }
    }

    packagingOptions {
        // removed because of conflict in creating package
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude '.readme'
    }

    aaptOptions {
        cruncherEnabled = false
    }

    lintOptions { abortOnError false }
}

dependencies {
    implementation 'com.android.support:design:25.3.1'
    implementation 'com.android.support:support-v13:25.3.1'
    implementation 'com.android.support:appcompat-v7:25.3.1'
    implementation 'com.android.support:recyclerview-v7:25.3.1'
    implementation 'com.android.support:cardview-v7:25.3.1'
    implementation 'com.takisoft.fix:preference-v7:25.3.1.1'
    implementation 'com.android:volley:1.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.0.pr3'
    implementation 'com.jakewharton.timber:timber:4.5.1'
    implementation 'commons-io:commons-io:2.5'

    annotationProcessor 'com.google.auto.value:auto-value:1.4.1'
    compileOnly 'com.google.auto.value:auto-value:1.4.1'
    annotationProcessor 'com.ryanharter.auto.value:auto-value-parcel:0.2.5'
    implementation 'com.ryanharter.auto.value:auto-value-parcel-adapter:0.2.5'
}

if (project.hasProperty('storeFile') && project.hasProperty('storePassword') &&
        project.hasProperty('keyPassword')) {
    android.signingConfigs.release.storeFile = file(storeFile)
    android.signingConfigs.release.storePassword = storePassword
    android.signingConfigs.release.keyPassword = keyPassword
} else {
    android.buildTypes.release.signingConfig = android.signingConfigs.debug
}

// dependencyUpdates: suggest only released artifacts
dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any {
                selection.candidate.version ==~ /(?i).*[.-]${it}.*/
            }
            if (rejected)
                selection.reject('Release candidate')
        }
    }
}

// add support for placeholders in resource files
def replacePlaceholdersInFile(basePath, fileName, placeholders) {
    def file = new File(basePath, fileName)

    if (!file.exists()) {
        logger.quiet("Unable to replace placeholders in " + file.toString() + ". File cannot be found.")
        return
    }

    logger.debug("Replacing placeholders in " + file.toString())
    logger.debug("Placeholders: " + placeholders.toString())

    def content = file.getText('UTF-8')
    placeholders.each { content = content.replaceAll("\\\$\\{${it.key}\\}", it.value) }
    file.write(content, 'UTF-8')
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.processResources.doFirst {
                // prepare placeholder map from manifestPlaceholders including applicationId placeholder
                def placeholders = variant.mergedFlavor.manifestPlaceholders + [applicationId: variant.applicationId]

                replacePlaceholdersInFile(resDir, 'xml/shortcuts.xml', placeholders)
            }
        }
    }
}